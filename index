<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up Form with PayPal Integration</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <!-- PayPal SDK -->
    <script src="https://www.paypal.com/sdk/js?client-id=AZRwUF3hYNgR-Jtoh1q1PlomhKXfcdTkYCOMZ9_Xb9Noax7VN8ERlwHxFxIewHYhrHiygmxkmoxMJuGg&currency=USD&components=buttons&disable-funding=paylater"></script>
    <style>
.selected-items-list {
    list-style-type: none; /* Remove default bullet points */
    margin-left: 20px; /* Add some margin to indent the list */
    padding: 0;
}

.selected-items-list li {
    margin-bottom: 5px; /* Space between list items */
    font-size: 16px; /* Adjust font size as needed */
    color: #0e2f7b; /* Your brand color */
}

      /* Styling the checkbox */
.custom-checkbox {
  appearance: none; /* Remove default style */
  background-color: #fff;
  border: 2px solid #0e2f7b;
  border-radius: 4px; /* Make it rounded */
  width: 20px;
  height: 20px;
  cursor: pointer;
  outline: none;
  transition: background-color 0.3s ease;
}

/* Checkbox when checked */
.custom-checkbox:checked {
  background-color: #0e2f7b;
  border-color: #0e2f7b;
  background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"%3E%3Cpath fill="white" d="M6.173 12.154a.75.75 0 01-.591-.293L3.373 9.177a.75.75 0 111.175-.936l1.294 1.62L11.46 4.96a.75.75 0 111.078 1.04l-5.354 5.154a.75.75 0 01-.578.247z"/%3E%3C/svg%3E');
  background-position: center;
  background-repeat: no-repeat;
  background-size: 12px;
}




        .btn-outline-primary {
            border-color: #0e2f7b;
            color: #0e2f7b;
            background-color: transparent;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .btn-outline-primary:hover {
            background-color: #0e2f7b !important;
            color: white !important;
        }

        @media (max-width: 767.98px) { /* For screens smaller than 768px (mobile devices) */
            .responsive-container {
                width: 98%;
            }
        }
    </style>
</head>
<body style="background-color: #f8f8f8;">

    <!-- Offline Modal -->
    <div class="modal fade" id="offlineModal" tabindex="-1" aria-labelledby="offlineModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
      <div class="modal-dialog">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" id="offlineModalLabel">Connection Lost</h5>
              </div>
              <div class="modal-body">
                  Oh no! It looks like we've lost connection. We want to make sure that we're able to properly process your registration, so please make sure that you're connected to the internet, and reload the page. If any problems persist, call us at (201) 308-2473 and we can register you over the phone.
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-primary" onclick="location.reload();">Reload Page</button>
              </div>
          </div>
      </div>
  </div>

     <!-- Error Modal -->
     <div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">
      <div class="modal-dialog">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" id="errorModalLabel">An Error Occurred - Please Try Again</h5>
              </div>
              <div class="modal-body">
                  <p id="errorMessage">Oh no! It looks like there was an error on our page. We want to make sure that we're able to properly process your registration, so please reload the page and try again. If any problems persist, call us at (201) 308-2473 and we can register you over the phone.</p>
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-primary" onclick="location.reload();">Reload Page</button>
              </div>
          </div>
      </div>
  </div>


<div class="container my-5">
  <div class="shadow p-3 mb-5 bg-white rounded responsive-container mx-auto" style="background-color: #FFFFFF; max-width: 95%;">
    <div class="card-body">
      <form id="signup-form">
        
        <!-- Loading Spinner with Label -->
        <div id="loading-container" class="text-center my-4">
          <p class="font-weight-bold" style="color: #0e2f7b;">Loading programs...</p>
          <div id="loading-spinner" class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </div>

        <!-- Category 1 Buttons -->
        <div class="form-group text-center">
          <label><strong>Select a Program:</strong></label>
          <div id="category1-buttons" class="btn-group-vertical w-100">
            <!-- Buttons will be dynamically added here -->
          </div>
        </div>

        <!-- Category 3 Buttons -->
        <div class="form-group text-center" id="level-group" style="display:none;">
          <label>Select Your Level:</label>
          <div id="category3-buttons" class="btn-group-vertical w-100">
            <!-- Buttons will be dynamically added here -->
          </div>
        </div>

        <!-- Category 2 Buttons -->
        <div class="form-group text-center" id="day-time-group" style="display:none;">
          <label>Select Your Day/Time:</label>
          <div id="category2-buttons" class="btn-group-vertical w-100">
            <!-- Buttons will be dynamically added here -->
          </div>
        </div>

        <!-- Item Selection -->
        <div class="form-group text-center" id="select-items-group" style="display:none;">
          <label>Select Programs:</label>
          <div id="item-list" class="d-flex flex-column">
            <!-- Checkboxes with bubbles will be dynamically added here -->
          </div>
        </div>

        <!-- Display Selected Items and Total Price -->
        <div class="form-group text-center" id="selected-items-group" style="display:none;">
          <label>Selected Programs:</label>
          <ul id="selected-items" class="selected-items-list">
            <!-- Selected items will be listed here dynamically -->
          </ul>
        </div>

        <div class="form-group text-center">
          <label><strong>Total Price:</strong></label>
          <p id="total-price" class="font-weight-bold">$0.00</p>
        </div>

        <div class="form-group text-center">
          <label style="font-size: 0.875rem; font-style: italic; color: #6c757d;">Service Fee (Applied at Checkout):</label>
          <p id="service-fee" class="font-weight-bold" style="font-size: 0.875rem; color: #6c757d; font-style: italic;">$0.00</p>
        </div>        

        <!-- User Details -->
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="first-name">First Name:</label>
            <input type="text" id="first-name" name="firstName" class="form-control" required>
          </div>
          <div class="form-group col-md-6">
            <label for="last-name">Last Name:</label>
            <input type="text" id="last-name" name="lastName" class="form-control" required>
          </div>
        </div>
      <div class = "form-row">
        <div class="form-group col-md-6">
          <label for="email">Email:</label>
          <input type="email" id="email" name="email" class="form-control" required>
        </div>

        <div class="form-group col-md-6">
          <label for="phone">Phone Number:</label>
          <input type="tel" id="phone" name="phone" class="form-control" required>
        </div>
      </div>

      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="town">Town:</label>
          <input type="text" id="town" name="town" class="form-control">
        </div>
      </div>

      <div class="form-row" id="child-name-group" style="display:none;">
        <div class="form-group col-md-6">
          <label for="child-name">Name of Child:</label>
          <input type="text" id="child-name" name="childName" class="form-control">
        </div>
      </div>
      
      

      <div class="form-group">
        <label for="credit-code" style="font-size: 14px;">Credit/Promo Code:</label>
        <input type="text" id="credit-code" class="form-control form-control-sm" placeholder="Enter your code here">
        
        <button type="button" id="apply-credit" class="btn mt-2 btn-sm" style="background-color: #0e2f7b; color: white;">Apply Code</button>
        <button type="button" id="check-credit-value" class="btn btn-secondary text-white mt-2 btn-sm">Check Credit Balance</button>
        
        <p id="credit-message" class="text-success mt-2" style="display:none;"></p>
      </div>
          
      

        <!-- PayPal and Submit Buttons -->
        <div id="paypal-button-container" class="mb-3" style="display:none;">
          <p style="font-size: 24px; text-align: center; font-weight: bold;">Checkout Options:</p>
          <div id="apple-pay-button-container"></div>
        </div>        
        <button type="button" id="submit-button" class="btn btn-outline-primary" style="display:none;">Submit</button>

      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('signup-form');
    const loadingContainer = document.getElementById('loading-container');
    const itemList = document.getElementById('item-list');
    const totalPriceElement = document.getElementById('total-price');
    const serviceFeeElement = document.getElementById('service-fee');
    const paypalButtonContainer = document.getElementById('paypal-button-container');
    const submitButton = document.getElementById('submit-button');
    const levelGroup = document.getElementById('level-group');
    const dayTimeGroup = document.getElementById('day-time-group');
    const selectItemsGroup = document.getElementById('select-items-group');
    const selectedItemsGroup = document.getElementById('selected-items-group');
    const applyCreditButton = document.getElementById('apply-credit');
    const creditCodeInput = document.getElementById('credit-code');
    const creditMessage = document.getElementById('credit-message');
    const phoneInput = document.getElementById('phone');
    
    phoneInput.addEventListener('input', formatPhoneNumber);

    let selectedItems = []; // Array to store selected items
    let totalPrice = 0; // Initial total price
    let creditApplied = 0; // Initial credit applied

    // Show the loading spinner and hide the item list
    loadingContainer.style.display = 'block';
    itemList.style.display = 'none';

    function showLoadingSpinner(button, originalText) {
  button.disabled = true;
  button.innerHTML = `
    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    Loading...
  `;
}

function formatPhoneNumber(event) {
  let input = event.target;
  let value = input.value.replace(/\D/g, ''); // Remove all non-digit characters

  // Ensure we only process up to 10 digits
  if (value.length > 10) {
    value = value.substring(0, 10);
  }

  let formattedValue = '';

  if (value.length > 0) {
    formattedValue = '(';
  }
  if (value.length > 3) {
    formattedValue += value.slice(0, 3) + ') ';
    if (value.length > 6) {
      formattedValue += value.slice(3, 6) + '-';
      formattedValue += value.slice(6, 10);
    } else {
      formattedValue += value.slice(3, 6);
    }
  } else {
    formattedValue += value;
  }

  input.value = formattedValue;
}

function submitForm() {
    const firstName = document.getElementById('first-name').value;
    const lastName = document.getElementById('last-name').value;
    const email = document.getElementById('email').value;
    const phoneNumber = document.getElementById('phone').value;
    const creditCode = document.getElementById('credit-code').value;
    const town = document.getElementById('town').value;
    const childName = document.getElementById('child-name').value;

    const totalAmount = parseFloat(totalPriceElement.textContent.replace('$', ''));
    let serviceFee = parseFloat(serviceFeeElement.textContent.replace('$', ''));

    if (totalAmount === 0) {
      serviceFee = 0;
    }

    // Calculate the amount of credit used
    const creditUsed = totalPrice + serviceFee - totalAmount;

    // Extract items, category1, and category3 from selectedItems array
    const items = selectedItems.map(i => i.item);  // Extract just the item names
    const categories1 = selectedItems.map(i => i.category1);  // Extract category1
    const categories3 = selectedItems.map(i => i.category3);  // Extract category3

    // Prepare the form data with separate fields for items, category1, and category3
    const formData = {
        firstName: firstName,
        lastName: lastName,
        email: email,
        phoneNumber: phoneNumber,
        items: items,  // Send items as an array
        category1: categories1,  // Send category1 as an array
        category3: categories3,  // Send category3 as an array
        totalAmount: totalAmount,  // Total amount for all selected items
        serviceFee: serviceFee,  // Service fee
        creditCode: creditCode,  // Credit code used
        town: town,  // Town
        childName: childName,  // Name of the child (if applicable)
        creditApplied: creditUsed  // Credit applied
    };

    // Send the data to the GAS web app using no-cors mode
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
        mode: 'no-cors'
    })
    .then(() => {
        alert('Registration submitted successfully!');
        document.getElementById('signup-form').reset();
        paypalButtonContainer.style.display = 'none';
        location.reload();
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Form submission may have failed, please try again.');
    });
}







// Function to restore the original button text
function restoreButton(button, originalText) {
  button.disabled = false;
  button.innerHTML = originalText;
}

    const checkCreditButton = document.getElementById('check-credit-value');
    
    // Function to check credit value
    checkCreditButton.addEventListener('click', function() {
  const originalText = 'Check Credit Balance';  // Save original button text
  showLoadingSpinner(checkCreditButton, originalText);  // Show spinner

  const creditCode = creditCodeInput.value.trim();

  if (!creditCode) {
    alert("Please enter a valid credit code.");
    restoreButton(checkCreditButton, originalText);  // Restore button if invalid input
    return;
  }

  // Fetch credit codes from your GAS web app
  fetch(`${url}?action=getCredits`)
    .then(response => response.json())
    .then(credits => {
      const credit = credits.find(c => c.code === creditCode);

      if (credit) {
        creditMessage.textContent = `Code balance: $${credit.amount}`;
        creditMessage.style.display = 'block';
      } else {
        alert("Invalid credit code.");
      }
      restoreButton(checkCreditButton, originalText);  // Stop spinner after fetch completes
    })
    .catch(error => {
      console.error('Error fetching credit codes:', error);
      alert('There was an error checking your credit. Please try again.');
      restoreButton(checkCreditButton, originalText);  // Stop spinner on error
    });
});


    // The URL of your deployed GAS web app
    const url = 'https://script.google.com/macros/s/AKfycbzD-qXAdE1Ew83vTfaA_1mQ-zHGoCQgSQ6q1Wtd22DaP-E8hI-XCc03LburksJQ5K8_/exec';

    // Fetch the data from the same GAS web app (GET request)
    fetch(url)
      .then(response => response.json())
      .then(data => {
        const category1Buttons = document.getElementById('category1-buttons');
        const category2Buttons = document.getElementById('category2-buttons');
        const category3Buttons = document.getElementById('category3-buttons');
        const selectedItemsList = document.getElementById('selected-items');

        function updateSelectedItems(item, price, category1, category3, isSelected) {
    console.log('Updating selected item:', item, price, isSelected);
    if (isSelected) {
        selectedItems.push({ item, price, category1, category3 });  // Now includes category1 and category3
        totalPrice += parseFloat(price);
    } else {
        selectedItems = selectedItems.filter(i => i.item !== item);  // Remove item by name
        totalPrice -= parseFloat(price);
    }
    console.log('Total Price after update:', totalPrice);
    renderSelectedItems();  // Update displayed items
    renderTotalPrice();     // Update total price
    renderServiceFee();      // Update service fee
    toggleSubmitButton();   // Show/hide submit button based on total
    toggleChildNameField(); // Show/hide child name field if relevant
}



        // Function to check if any selected item contains the word "Kids" and show/hide the "Name of Child" input
function toggleChildNameField() {
  const childNameGroup = document.getElementById('child-name-group');
  const selectedItemsList = document.getElementById('selected-items');
  const selectedItems = selectedItemsList.getElementsByTagName('li');
  
  let containsKidsProgram = false;

  // Loop through selected items to check if any contains "Kids"
  for (let i = 0; i < selectedItems.length; i++) {
    if (selectedItems[i].textContent.includes("Kids")) {
      containsKidsProgram = true;
      break;
    }
  }

  // Show or hide the "Name of Child" field based on the selection
  if (containsKidsProgram) {
    childNameGroup.style.display = 'block';
  } else {
    childNameGroup.style.display = 'none';
  }
}

        function renderSelectedItems() {
  const selectedItemsList = document.getElementById('selected-items');
  selectedItemsList.innerHTML = ''; // Clear previous items

  if (selectedItems.length === 0) {
    const noItemsMessage = document.createElement('li');
    noItemsMessage.textContent = "No programs selected";
    noItemsMessage.style.fontStyle = 'italic';
    selectedItemsList.appendChild(noItemsMessage);
  } else {
    selectedItems.forEach(({ item }) => {
      const li = document.createElement('li');
      li.textContent = item;

      // Create a small "x" button to remove the item
      const removeButton = document.createElement('button');
      removeButton.textContent = 'x';
      removeButton.className = 'btn btn-link btn-sm';
      removeButton.style.marginLeft = '10px'; // Add some spacing
      removeButton.style.color = 'red'; // Make it stand out

      // Event listener to remove the item when "x" is clicked
      removeButton.addEventListener('click', () => {
        removeSelectedItem(item);
      });

      li.appendChild(removeButton); // Append the "x" button to the list item
      selectedItemsList.appendChild(li);
    });
  }
  
  selectedItemsList.className = 'selected-items-list';
}

function removeSelectedItem(itemToRemove) {
  // Filter out the item to remove
  selectedItems = selectedItems.filter(i => i.item !== itemToRemove);

  // Recalculate the total price after removing the item
  totalPrice = selectedItems.reduce((sum, i) => sum + parseFloat(i.price), 0);

  // Uncheck the corresponding checkbox in the item list
  const checkbox = document.querySelector(`#item-list input[value="${itemToRemove}"]`);
  if (checkbox) {
    checkbox.checked = false;
  }

  // Re-render the selected items, total price, and service fee
  renderSelectedItems();
  renderTotalPrice();
  renderServiceFee();
  toggleSubmitButton(); // Update the visibility of PayPal/Submit button
}




        function restoreCheckboxState() {
          document.querySelectorAll('#item-list input[type="checkbox"]').forEach(checkbox => {
            const item = selectedItems.find(i => i.item === checkbox.value);
            if (item) {
              checkbox.checked = true;
            }
          });
        }

        // Hide the loading spinner and show the item list
        loadingContainer.style.display = 'none';
        itemList.style.display = 'flex';

        // Function to create and style buttons
        function createButton(category) {
          const button = document.createElement('button');
          button.type = 'button';
          button.className = 'btn btn-outline-primary btn-sm btn-block text-truncate mb-2';
          button.style.borderColor = '#0e2f7b';
          button.style.color = '#0e2f7b';
          button.textContent = category;
          return button;
        }

        // Filter out unique categories and create buttons for each category
        const category1Options = [...new Set(data.map(product => product.category1))];
        category1Options.forEach(category => {
          const button = createButton(category);
          button.addEventListener('click', () => {
            toggleActiveButton(category1Buttons, button);
            selectCategory1(category);
            levelGroup.style.display = 'block'; // Show the Level group when a Program is selected
          });
          category1Buttons.appendChild(button);
        });

        function toggleActiveButton(group, button) {
          Array.from(group.children).forEach(btn => {
            btn.classList.remove('active');
            btn.style.backgroundColor = 'transparent';
            btn.style.color = '#0e2f7b';
          });
          button.classList.add('active');
          button.style.backgroundColor = '#0e2f7b';
          button.style.color = 'white';
        }

        function selectCategory1(category1) {
          category2Buttons.innerHTML = ''; // Clear previous buttons
          category3Buttons.innerHTML = ''; // Clear previous buttons
          itemList.innerHTML = ''; // Clear previous items
          const filteredData = data.filter(product => product.category1 === category1);
          const category3Options = [...new Set(filteredData.map(product => product.category3))];
          category3Options.forEach(category => {
            const button = createButton(category);
            button.addEventListener('click', () => {
              toggleActiveButton(category3Buttons, button);
              selectCategory3(category1, category);
              dayTimeGroup.style.display = 'block'; // Show the Day/Time group when a Level is selected
            });
            category3Buttons.appendChild(button);
          });
        }

        function selectCategory3(category1, category3) {
          category2Buttons.innerHTML = ''; // Clear previous buttons
          itemList.innerHTML = ''; // Clear previous items
          const filteredData = data.filter(product => product.category1 === category1 && product.category3 === category3);
          const category2Options = [...new Set(filteredData.map(product => product.category2))];
          category2Options.forEach(category => {
            const button = createButton(category);
            button.addEventListener('click', () => {
              toggleActiveButton(category2Buttons, button);
              selectCategory2(category1, category3, category);
              selectItemsGroup.style.display = 'block'; // Show the Items group when a Day/Time is selected
              selectedItemsGroup.style.display = 'block'; // Show the Selected Items group
            });
            category2Buttons.appendChild(button);
          });
        }

        function selectCategory2(category1, category3, category2) {
  itemList.innerHTML = ''; // Clear previous items
  const filteredItems = data.filter(product => product.category1 === category1 && product.category2 === category2 && product.category3 === category3);
  
  filteredItems.forEach(product => {
    const div = document.createElement('div');
    div.className = 'mb-3';

    const card = document.createElement('div');
    card.className = 'card p-2 d-flex align-items-center flex-row small-text';
    card.style.cursor = 'pointer';
    card.style.fontSize = '16px'; // Adjust to your desired size

    const input = document.createElement('input');
    input.className = 'custom-checkbox';
    input.type = 'checkbox';
    input.name = 'items[]';
    input.value = product.item;
    input.style.marginRight = '10px';

    const label = document.createElement('label');
    label.className = 'form-check-label';

    if (product.item.includes('Package')) {
      card.style.backgroundColor = '#e9eef6'; // Light blue background for "Package" items
    }

    // Check if the item is sold out
    if (product.soldOut) {
      label.innerHTML = `<s>${product.item}</s> - Sold Out`;
      card.style.backgroundColor = '#f8d7da'; // Light red background for sold-out items
      input.disabled = true; // Disable the checkbox for sold-out items
    } else {
      label.textContent = `${product.item} - $${product.price}`;
    }

    // Add event listener to handle the card click
    card.addEventListener('click', (event) => {
      if (!event.target.matches('input')) {  // Prevents toggling twice when clicking directly on the checkbox
        input.checked = !input.checked; // Toggle the checkbox
        updateSelectedItems(product.item, product.price, category1, category3, input.checked);  // Update selected items
      }
    });

    card.appendChild(input);
    card.appendChild(label);
    div.appendChild(card);
    itemList.appendChild(div);
  });

  restoreCheckboxState(); // Restore the checkbox state when switching categories
}




      })
      .catch(error => {
        loadingContainer.style.display = 'none';
        console.error('Error fetching data:', error);
      });

    // Function to validate the form
    function validateForm() {
      const firstName = document.getElementById('first-name').value.trim();
      const lastName = document.getElementById('last-name').value.trim();
      const email = document.getElementById('email').value.trim();
      const phoneNumber = document.getElementById('phone').value.trim();
      const hasSelectedItems = itemList.querySelectorAll('input[type="checkbox"]:checked').length > 0;

      // Check if all fields are filled out
      return firstName && lastName && email && phoneNumber && hasSelectedItems;
    }

    function renderTotalPrice() {
    console.log('Rendering total price:', totalPrice, 'Credit applied:', creditApplied);
    let adjustedTotal = totalPrice;

    if (discountRate > 0) {
        creditApplied = (totalPrice * discountRate) / 100; // Recalculate the discount based on the current total price
    }

    adjustedTotal = Math.max(totalPrice - creditApplied, 0);
    console.log('Adjusted total price:', adjustedTotal);
    totalPriceElement.textContent = `$${adjustedTotal.toFixed(2)}`;
}


    function renderServiceFee() {
      const adjustedTotal = Math.max(totalPrice - creditApplied, 0);
      const serviceFee = Math.max(adjustedTotal * 0.025, 1).toFixed(2);
      serviceFeeElement.textContent = `$${serviceFee}`;
    }

    function toggleSubmitButton() {
      const adjustedTotal = Math.max(totalPrice - creditApplied, 0);
      if (adjustedTotal > 0) {
        paypalButtonContainer.style.display = 'block';
        submitButton.style.display = 'none';
      } else {
        paypalButtonContainer.style.display = 'none';
        submitButton.style.display = 'block';
      }
    }

    // Function to apply credit code
    let discountRate = 0;  // Add this global variable to store the discount rate

    applyCreditButton.addEventListener('click', function() {
  const originalText = 'Apply Code';
  showLoadingSpinner(applyCreditButton, originalText);

  const creditCode = creditCodeInput.value.trim();

  if (!creditCode) {
    alert("Please enter a valid credit code.");
    restoreButton(applyCreditButton, originalText); // Stop spinner if invalid input
    return;
  }

  // Fetch credit codes from your GAS web app
  fetch(`${url}?action=getCredits`)
    .then(response => response.json())
    .then(credits => {
      if (credits.error) {
        throw new Error(credits.error);
      }

      const credit = credits.find(c => c.code === creditCode);

      if (credit) {
        if (credit.amount === 0) {
          creditMessage.textContent = "This code has no remaining balance.";
        } else {
          creditApplied = parseFloat(credit.amount);
          discountRate = 0; // Reset discount rate if a credit code is applied
          renderTotalPrice(); 
          renderServiceFee(); 
          togglePayPalButton();

          creditMessage.textContent = `Credit of $${credit.amount} applied successfully!`;
        }
        creditMessage.style.display = 'block';
        restoreButton(applyCreditButton, originalText); // Stop spinner after success
      } else {
        // If credit code not found, check discount codes
        fetch(`${url}?action=getDiscounts`)
          .then(response => response.json())
          .then(discounts => {
            if (discounts.error) {
              throw new Error(discounts.error);
            }

            const discount = discounts.find(d => d.code === creditCode);

            if (discount) {
              discountRate = parseFloat(discount.discountRate);
              creditApplied = (totalPrice * discountRate) / 100; // Apply discount based on current total
              renderTotalPrice();
              renderServiceFee();
              togglePayPalButton();

              creditMessage.textContent = `Discount of ${discountRate}% applied successfully!`;
              creditMessage.style.display = 'block';
              restoreButton(applyCreditButton, originalText); // Stop spinner after success
            } else {
              alert("Invalid credit or discount code.");
              restoreButton(applyCreditButton, originalText); // Stop spinner on invalid code
            }
          })
          .catch(error => {
            console.error('Error fetching discount codes:', error);
            alert('There was an error applying your discount. Please try again.');
            restoreButton(applyCreditButton, originalText); // Stop spinner on error
          });
      }
    })
    .catch(error => {
      console.error('Error fetching credit codes:', error);
      alert('There was an error applying your credit. Please try again.');
      restoreButton(applyCreditButton, originalText); // Stop spinner on error
    });
});



function togglePayPalButton() {
  const adjustedTotal = Math.max(totalPrice - creditApplied, 0);
  const paypalButtonContainer = document.getElementById('paypal-button-container');
  const submitButton = document.getElementById('submit-button'); // Assuming you have a submit button with this ID
  
  if (adjustedTotal > 0) {
    paypalButtonContainer.style.display = 'block';
    submitButton.style.display = 'none';  // Hide submit button if total is > 0
  } else {
    paypalButtonContainer.style.display = 'none';
    submitButton.style.display = 'block';  // Show submit button if total is 0
  }
}




paypal.Buttons({
      createOrder: function(data, actions) {
        // Validate the form first
        if (!validateForm()) {
          alert('Please fill out all required fields before proceeding to payment.');
          return; // Prevent creating the order if the form is incomplete
        }

        // Calculate adjusted total and ensure it has two decimal places
        const adjustedTotal = parseFloat(Math.max(totalPrice - creditApplied, 0)).toFixed(2);
        if (isNaN(adjustedTotal) || adjustedTotal <= 0) {
          return actions.reject(); // Stop PayPal process if total is 0 or less
        }
        console.log('Adjusted Total:', adjustedTotal);

        // Calculate service fee and ensure it has two decimal places
        const serviceFee = parseFloat(Math.max(adjustedTotal * 0.025, 1)).toFixed(2);
        if (isNaN(serviceFee)) {
          console.error('Error: serviceFee is not a valid number.');
          return; // Prevent order creation if the calculation failed
        }
        console.log('Service Fee:', serviceFee);

        // Calculate total amount and ensure it has two decimal places
        const totalAmount = parseFloat(adjustedTotal) + parseFloat(serviceFee);
        if (isNaN(totalAmount)) {
          console.error('Error: totalAmount is not a valid number.');
          return; // Prevent order creation if the calculation failed
        }
        console.log('Total Amount:', totalAmount.toFixed(2));

        const currency = 'USD'; // Set your currency code here

        // Create the PayPal order
        return actions.order.create({
          purchase_units: [{
            amount: {
              currency_code: currency,
              value: totalAmount.toFixed(2), // Ensure the total amount is a string with two decimals
              breakdown: {
                item_total: {
                  currency_code: currency,
                  value: adjustedTotal.toString()
                },
                handling: {
                  currency_code: currency,
                  value: serviceFee.toString()
                }
              }
            }
          }]
        }).catch(error => {
          console.error('PayPal order creation error:', error);
          alert('There was an error creating the PayPal order. Please try again.');
        });
      },
      onApprove: function(data, actions) {
        // This function captures the funds from the transaction
        return actions.order.capture().then(function(details) {
          alert('Transaction completed by ' + details.payer.name.given_name);

          // Proceed to submit the form data to your server
          submitForm();
        });
      },
      onError: function(err) {
        // Show an error page here, when an error occurs
        console.error('PayPal Checkout onError:', err);
        alert('Something went wrong with the payment. Please try again.');
      }
    }).render('#paypal-button-container'); // Display payment options on your web page


    // Manually submit form when the total is 0
    submitButton.addEventListener('click', function() {
  if (validateForm()) {
    // Disable the button to prevent multiple clicks
    submitButton.disabled = true;

    submitForm(); // Call the form submission function
  } else {
    alert('Please fill out all required fields before submitting.');
  }
});

  });


  
  function showOfflineModal() {
            $('#offlineModal').modal({
                backdrop: 'static', // Disable closing by clicking outside
                keyboard: false     // Disable closing by pressing the Escape key
            });
            $('#offlineModal').modal('show'); // Show the modal
        }

        // Listen for offline event
        window.addEventListener('offline', function() {
            console.log("Offline detected");
            showOfflineModal();
        });

               // Function to show error modal with message
 //              function showErrorModal(message) {
 //           document.getElementById('errorMessage').textContent = message;
 //           $('#errorModal').modal({
 //               backdrop: 'static', // Disable closing by clicking outside
 //               keyboard: false     // Disable closing by pressing the Escape key
 //           });
 //           $('#errorModal').modal('show'); // Show the modal
 //       }

        // Global error handler
//        window.onerror = function(message, source, lineno, colno, error) {
//            console.error(`Error: ${message} at ${source}:${lineno}:${colno}`);
//            showErrorModal(message); // Show the error modal with the error message
//            return true; // Prevent the error from being logged in the console if you prefer
//        };



</script>
 <!-- jQuery (required for Bootstrap 4 JS) -->
 <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    
 <!-- Bootstrap 4.5.2 JS -->
 <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
</body>
</html>
